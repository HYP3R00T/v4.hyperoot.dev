---
import type { HeadingHierarchy, HeadingProps } from "@/lib/types";
import { createHeadingHierarchy } from "@/lib/utils";

const { headings } = Astro.props as HeadingProps;
const toc: HeadingHierarchy[] = createHeadingHierarchy(headings ?? []);
const hasToC = toc.length > 1;
---

{
    hasToC && (
        <div class="toc-container pr-2 overflow-x-hidden w-full">
            <div class="text-white py-4 hidden lg:flex flex-col gap-4">
                {toc.map((heading) => (
                    <a href={`#${heading.slug}`} class="toc-item">
                        <div class="toc-line transition-all w-5 bg-light" />
                        <div class="toc-link transition-all text-light whitespace-nowrap ">
                            {heading.text}
                        </div>
                    </a>
                ))}
            </div>
        </div>
    )
}

<style>
    .toc-item {
        @apply flex flex-row items-center gap-3;
    }
    :hover.toc-item .toc-line {
        @apply h-px w-10 bg-accent;
    }
    :hover.toc-item .toc-link {
        @apply text-accent;
    }
    .toc-item .toc-line {
        @apply h-px;
    }
    .toc-item .toc-link {
        @apply text-xs uppercase font-semibold tracking-wide;
    }

    /* .toc-item > * {
        @apply transition-all;
    } */
</style>

<script>
    document.addEventListener("astro:page-load", () => {
        const proseContainer = document.querySelector(".prose");
        if (!proseContainer) return;

        const headings = Array.from(proseContainer.querySelectorAll("h2, h3"));
        const tocLinks = document.querySelectorAll(".toc-item");

        const headerOffset = 80; // Adjust this value based on your fixed header height

        tocLinks.forEach((link, index) => {
            link.addEventListener("click", (event) => {
                event.preventDefault();

                const href = link.getAttribute("href");
                if (!href) return; // Check if href is null

                const targetId = href.substring(1); // Safe to use substring now
                const targetElement = document.getElementById(targetId);

                if (targetElement) {
                    const elementPosition = targetElement.offsetTop;
                    const offsetPosition = elementPosition - headerOffset;

                    window.scrollTo({
                        top: offsetPosition,
                        behavior: "smooth",
                    });
                }
            });
        });

        document.addEventListener("scroll", () => {
            let index = headings.length;

            while (
                --index &&
                window.scrollY + 300 <
                    (headings[index] as HTMLElement)?.offsetTop
            ) {}

            // Ensure index is within bounds
            if (index < 0 || index >= tocLinks.length) {
                return;
            }

            // Update ToC Links
            tocLinks.forEach((link) => {
                link.querySelector(".toc-link")?.classList.remove(
                    "text-lightest",
                );
                link.querySelector(".toc-link")?.classList.add("text-light");
            });

            tocLinks[index]
                .querySelector(".toc-link")
                ?.classList.add("text-lightest");
            tocLinks[index]
                .querySelector(".toc-link")
                ?.classList.remove("text-light");

            // Update ToC Lines
            const tocLines = document.querySelectorAll(".toc-line");
            tocLines.forEach((line) => {
                line.classList.remove("w-10", "bg-lightest");
                line.classList.add("w-5", "bg-light");
            });
            tocLines[index].classList.add("w-10", "bg-lightest");
            tocLines[index].classList.remove("w-5", "bg-light");
        });
    });
</script>
