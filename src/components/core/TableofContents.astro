---
import type { HeadingHierarchy, HeadingProps } from "@/lib/types";
import { createHeadingHierarchy } from "@/lib/utils";

const { headings } = Astro.props as HeadingProps;
const toc: HeadingHierarchy[] = createHeadingHierarchy(headings ?? []);
const hasToC = toc.length > 1;
---

<div class="toc-container pr-2 overflow-x-hidden">
  {
    hasToC && (
      <div class="text-text_base py-4 hidden lg:flex flex-col gap-4  w-full">
        {toc.map((heading) => (
          <a href={`#${heading.slug}`} class="toc-item w-full">
            <p class="toc-link text-text_muted ">{heading.text}</p>
          </a>
        ))}
      </div>
    )
  }
</div>

<style>
  .toc-item {
    @apply flex flex-row items-center gap-3;
  }
  :hover.toc-item .toc-link {
    @apply text-accent_red;
  }
  .toc-item .toc-link {
    @apply text-xs uppercase font-semibold tracking-wide;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const proseContainer = document.querySelector(".prose");
    if (!proseContainer) return;

    const headings = Array.from(proseContainer.querySelectorAll("h2, h3"));
    const tocLinks = document.querySelectorAll(".toc-item");

    const headerOffset = 192; // Adjust this value based on your fixed header height

    tocLinks.forEach((link, index) => {
      link.addEventListener("click", (event) => {
        event.preventDefault();

        const href = link.getAttribute("href");
        if (!href) return; // Check if href is null

        const targetId = href.substring(1); // Safe to use substring now
        const targetElement = document.getElementById(targetId);

        if (targetElement) {
          const elementPosition = targetElement.offsetTop;
          const offsetPosition = elementPosition - headerOffset;

          window.scrollTo({
            top: offsetPosition,
            behavior: "smooth",
          });
        }
      });
    });

    document.addEventListener("scroll", () => {
      let index = headings.length;

      while (
        --index &&
        window.scrollY + 300 < (headings[index] as HTMLElement)?.offsetTop
      ) {}

      // Ensure index is within bounds
      if (index < 0 || index >= tocLinks.length) {
        return;
      }

      // Update ToC Links
      tocLinks.forEach((link) => {
        link.querySelector(".toc-link")?.classList.remove("text-accent_red");
        link.querySelector(".toc-link")?.classList.add("text-text_muted");
      });

      tocLinks[index]
        .querySelector(".toc-link")
        ?.classList.add("text-accent_red");
      tocLinks[index]
        .querySelector(".toc-link")
        ?.classList.remove("text-text_muted");
    });
  });
</script>
