---
interface Props {
  texts: string[];
  className?: string;
  interval?: number; // Time between text changes in ms
}

const {
  texts,
  className = "",
  interval = 2000, // Default to 3 seconds between changes
} = Astro.props;

// Get the longest text length to set initial space
const maxLength = Math.max(...texts.map((text) => text.length));
const initialText = texts[0].padEnd(maxLength, " ");
---

<div class={className} id="scramble-container">
  <h3 id="scramble-text" data-value={texts[0]}>
    {initialText}
  </h3>
</div>

<script define:vars={{ texts, interval }}>
  document.addEventListener("astro:page-load", () => {
    const textElement = document.getElementById("scramble-text");
    const letters =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz";
    let currentIndex = 0;

    function scrambleText(nextText) {
      let iteration = 0;
      let currentScramble = nextText.padEnd(textElement.innerText.length, " ");

      const scrambleInterval = setInterval(() => {
        textElement.innerText = currentScramble
          .split("")
          .map((letter, index) => {
            if (index < iteration) {
              return nextText[index];
            }
            return letters[Math.floor(Math.random() * 62)];
          })
          .join("");

        if (iteration >= nextText.length) {
          clearInterval(scrambleInterval);
          // Ensure the final text is exactly what we want
          textElement.innerText = nextText;
        }

        iteration += 1 / 3;
      }, 20);
    }

    // Function to cycle through texts
    function cycleText() {
      currentIndex = (currentIndex + 1) % texts.length;
      const nextText = texts[currentIndex];
      textElement.dataset.value = nextText;
      scrambleText(nextText);
    }

    // Start the cycle
    setInterval(cycleText, interval);
  });
</script>
